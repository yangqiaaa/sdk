/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: TBOX_CDCS_v2.3.proto */

#ifndef PROTOBUF_C_TBOX_5fCDCS_5fv2_2e3_2eproto__INCLUDED
#define PROTOBUF_C_TBOX_5fCDCS_5fv2_2e3_2eproto__INCLUDED

#include "cdcs_protobuf.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Tbox__Net__TboxNetworkCtrl Tbox__Net__TboxNetworkCtrl;
typedef struct _Tbox__Net__CallAction Tbox__Net__CallAction;
typedef struct _Tbox__Net__CallActionResult Tbox__Net__CallActionResult;
typedef struct _Tbox__Net__CallStatus Tbox__Net__CallStatus;
typedef struct _Tbox__Net__TboxInfo Tbox__Net__TboxInfo;
typedef struct _Tbox__Net__TboxGPSCmd Tbox__Net__TboxGPSCmd;
typedef struct _Tbox__Net__TboxGPSInfo Tbox__Net__TboxGPSInfo;
typedef struct _Tbox__Net__TboxActiveState Tbox__Net__TboxActiveState;
typedef struct _Tbox__Net__IhuHeartType Tbox__Net__IhuHeartType;
typedef struct _Tbox__Net__TboxRemoteDiagnose Tbox__Net__TboxRemoteDiagnose;
typedef struct _Tbox__Net__IhuLogfile Tbox__Net__IhuLogfile;
typedef struct _Tbox__Net__IhuChargeAppoointmentSts Tbox__Net__IhuChargeAppoointmentSts;
typedef struct _Tbox__Net__TboxChargeAppoointmentSet Tbox__Net__TboxChargeAppoointmentSet;
typedef struct _Tbox__Net__TboxChargeCtrl Tbox__Net__TboxChargeCtrl;
typedef struct _Tbox__Net__TboxChargeRecord Tbox__Net__TboxChargeRecord;
typedef struct _Tbox__Net__SetTboxBatteryMode Tbox__Net__SetTboxBatteryMode;
typedef struct _Tbox__Net__TboxBatteryModeResult Tbox__Net__TboxBatteryModeResult;
typedef struct _Tbox__Net__StartSentinelMode Tbox__Net__StartSentinelMode;
typedef struct _Tbox__Net__EndSentinelMode Tbox__Net__EndSentinelMode;
typedef struct _Tbox__Net__ReStartSentinelMode Tbox__Net__ReStartSentinelMode;
typedef struct _Tbox__Net__BattHeatSingle Tbox__Net__BattHeatSingle;
typedef struct _Tbox__Net__SetBattHeatMode Tbox__Net__SetBattHeatMode;
typedef struct _Tbox__Net__BattHeatModeRecord Tbox__Net__BattHeatModeRecord;
typedef struct _Tbox__Net__SetBattHeatModeResult Tbox__Net__SetBattHeatModeResult;
typedef struct _Tbox__Net__ParkingRoute Tbox__Net__ParkingRoute;
typedef struct _Tbox__Net__ParkingRouteSingle Tbox__Net__ParkingRouteSingle;
typedef struct _Tbox__Net__ParkingRouteRecord Tbox__Net__ParkingRouteRecord;
typedef struct _Tbox__Net__SecurityGuard Tbox__Net__SecurityGuard;
typedef struct _Tbox__Net__DischargeState Tbox__Net__DischargeState;
typedef struct _Tbox__Net__NetworkStatus Tbox__Net__NetworkStatus;
typedef struct _Tbox__Net__TboxSignalType Tbox__Net__TboxSignalType;
typedef struct _Tbox__Net__MsgResult Tbox__Net__MsgResult;
typedef struct _Tbox__Net__TopMessage Tbox__Net__TopMessage;


/* --- enums --- */

typedef enum _Tbox__Net__Messagetype {
  /*
   *no use,just for remove 0 in the enum
   */
  TBOX__NET__MESSAGETYPE__REQUEST_RESPONSE_NONE = 0,
  /*
   *heartbeat signal
   */
  TBOX__NET__MESSAGETYPE__REQUEST_HEARTBEAT_SIGNAL = 1,
  /*
   *heartbeat call back	
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_HEARTBEAT_RESULT = 2,
  /*
   *ivi request tbox network signal strength; no topmessage's field
   */
  TBOX__NET__MESSAGETYPE__REQUEST_NETWORK_SIGNAL_STRENGTH = 3,
  /*
   *tbox response network signal strength; topmessage's field: signal_type signal_power
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_NETWORK_SIGNAL_STRENGTH = 4,
  /*
   *ivi request tbox a call action; topmessage's field: call_action
   */
  TBOX__NET__MESSAGETYPE__REQUEST_CALL_ACTION = 5,
  /*
   *tbox response ivi a call action result; topmessage's field: call_result
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_CALL_ACTION_RESULT = 6,
  /*
   *tbox report a call action status; topmessage's field: call_status
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_CALL_STATUS = 7,
  /*
   *ivi request tbox info; no topmessage's field
   */
  TBOX__NET__MESSAGETYPE__REQUEST_TBOX_INFO = 8,
  /*
   *tbox response tbox info; topmessage's field: tbox_info
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_TBOX_INFO = 9,
  /*
   *ivi request GPS set
   */
  TBOX__NET__MESSAGETYPE__REQUEST_TBOX_GPS_SET = 10,
  /*
   *ivi response GPS set
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_TBOX_GPS_SET_RESULT = 11,
  /*
   *tbox response mac address		
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_TBOX_GPSINFO_RESULT = 12,
  /*
   *tbox response active state
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_TBOX_ACTIVESTATE_RESULT = 13,
  /*
   *tbox request IVI to capture videos or pictures
   */
  TBOX__NET__MESSAGETYPE__REQUEST_TBOX_REMOTEDIAGNOSE = 14,
  /*
   *ivi response tbox : contrl result
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_TBOX_REMOTEDIAGNOSE_RESULT = 15,
  /*
   *tbox request ihu to report log files
   */
  TBOX__NET__MESSAGETYPE__REQUEST_IHU_LOGFILE = 16,
  /*
   *ihu response tbox result
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_IHU_LOGFILE_RESULT = 17,
  /*
   *tbox request ihu to update charge appointment state
   */
  TBOX__NET__MESSAGETYPE__REQUEST_IHU_CHARGEAPPOINTMENTSTS = 18,
  /*
   *ihu response tbox result
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_IHU_CHARGEAPPOINTMENTSTS_RESULT = 19,
  /*
   *ihu request tbox to set charge appointment 
   */
  TBOX__NET__MESSAGETYPE__REQUEST_TBOX_CHARGEAPPOINTMENTSET = 20,
  /*
   *tbox response ihu result
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_TBOX_CHARGEAPPOINTMENTSET_RESULT = 21,
  /*
   *ihu request tbox to charge
   */
  TBOX__NET__MESSAGETYPE__REQUEST_TBOX_CHARGECTRL = 22,
  /*
   *tbox response ihu result
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_TBOX_CHARGECTRL_RESULT = 23,
  /*
   *ihu response tbox call action status (FOR: RESPONSE_CALL_STATUS)
   */
  TBOX__NET__MESSAGETYPE__IHU_CALL_STATUS_RESULT = 24,
  /*
   *ihu response tbox active status (FOR: RESPONSE_TBOX_ACTIVESTATE_RESULT)
   */
  TBOX__NET__MESSAGETYPE__IHU_ACTIVESTATE_RESULT = 25,
  /*
   *ihu request tbox to get charge record
   */
  TBOX__NET__MESSAGETYPE__REQUEST_QUERY_CHARGE_RECORD = 26,
  /*
   *tbox response ihu charge record
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_CHARGE_RECORD_RESULT = 27,
  /*
   *tbox told ihu have a OTA task
   */
  TBOX__NET__MESSAGETYPE__REQUEST_OTAUPDATE_TASK = 28,
  /*
   *ihu response tbox result
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_OTAUPDATE_TASK_RESULT = 29,
  /*
   *ihu request tbox to set battery mode
   */
  TBOX__NET__MESSAGETYPE__REQUEST_TBOX_BATTERYMODE = 30,
  /*
   *tbox response ihu result
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_TBOX_BATTERYMODE_RESULT = 31,
  /*
   *tbox request ihu start sentinelmode
   */
  TBOX__NET__MESSAGETYPE__REQUEST_START_SENTINELMODE = 32,
  /*
   *ihu response tbox result
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_START_SENTINELMODE_RESULT = 33,
  /*
   *ihu request tbox over sentinelmode
   */
  TBOX__NET__MESSAGETYPE__REQUEST_END_SENTINELMODE = 34,
  /*
   *tbox response ihu result
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_END_SENTINELMODE_RESULT = 35,
  /*
   *ihu request tbox to update 
   */
  TBOX__NET__MESSAGETYPE__REQUEST_TBOXUPDATE_TASK = 36,
  /*
   *tbox response ihu result 
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_TBOXUPDATE_TASK_RESULT = 37,
  /*
   *ihu request tbox to reboot
   */
  TBOX__NET__MESSAGETYPE__REQUEST_TBOX_REBOOT = 38,
  /*
   *tbox response ihu result
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_TBOX_REBOOT_RESULT = 39,
  /*
   *ihu request tbox to set BATTHEATMODE
   */
  TBOX__NET__MESSAGETYPE__REQUEST_SET_BATTHEATMODE = 40,
  /*
   *tbox response ihu result
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_SET_BATTHEATMODE_RESULT = 41,
  /*
   *ihu request tbox to query BATTHEATMODE
   */
  TBOX__NET__MESSAGETYPE__REQUEST_QUERY_BATTHEATMODE = 42,
  /*
   *tbox response ihu result
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_QUERY_BATTHEATMODE_RESULT = 43,
  /*
   *ihu request tbox to set parking route
   */
  TBOX__NET__MESSAGETYPE__REQUEST_SET_PARKING_ROUTE = 44,
  /*
   *tbox response ihu result
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_SET_PARKINGROUTE_RESULT = 45,
  /*
   *tbox request ihu to sync parking route
   */
  TBOX__NET__MESSAGETYPE__REQUEST_SYNC_PARKING_ROUTE = 46,
  /*
   *ihu response tbox result
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_SYNC_PARKINGROUTE_RESULT = 47,
  /*
   *tbox request ihu to sync batterymode
   */
  TBOX__NET__MESSAGETYPE__REQUEST_SYNC_BATTERYMODE = 48,
  /*
   *ihu response tbox result
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_SYNC_BATTERYMODE_RESULT = 49,
  /*
   *ihu request tbox query parkingroute
   */
  TBOX__NET__MESSAGETYPE__REQUEST_QUERY_PARKINGROUTE = 50,
  /*
   *tbox response ihu result
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_QUERY_PARKINGROUTE_RESULT = 51,
  /*
   *tbox request ihu to sync battheatmode
   */
  TBOX__NET__MESSAGETYPE__REQUEST_SYNC_BATTHEATMODE = 52,
  /*
   *ihu response tbox result
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_SYNC_BATTHEATMODE_RESULT = 53,
  /*
   *ihu request tbox to query batterymode
   */
  TBOX__NET__MESSAGETYPE__REQUEST_QUERY_BATTERYMODE = 54,
  /*
   *tbox response ihu result
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_QUERY_BATTERYMODE_RESULT = 55,
  /*
   *ihu request tbox to set security guard
   */
  TBOX__NET__MESSAGETYPE__REQUEST_SET_SECURITY_GUARD = 56,
  /*
   *tbox response ihu result
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_SET_SECURITY_GUARD_RESULT = 57,
  /*
   *ihu request tbox to query security guard 
   */
  TBOX__NET__MESSAGETYPE__REQUEST_QUERY_SECURITY_GUARD = 58,
  /*
   *tbox response ihu result
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_QUERY_SECURITY_GUARD_RESULT = 59,
  /*
   *ihu request tbox to sync security guard
   */
  TBOX__NET__MESSAGETYPE__REQUEST_SYNC_SECURITY_GUARD = 60,
  /*
   *tbox response ihu result
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_SYNC_SECURITY_GUARD_RESULT = 61,
  /*
   *ihu request tbox to set discharge
   */
  TBOX__NET__MESSAGETYPE__REQUEST_SET_DISCHARGE = 62,
  /*
   *tbox response ihu result
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_SET_DISCHARGE_RESULT = 63,
  /*
   *ihu request tbox to query discharge
   */
  TBOX__NET__MESSAGETYPE__REQUEST_QUERY_DISCHARGE = 64,
  /*
   *tbox response ihu result
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_QUERY_DISCHARGE_RESULT = 65,
  /*
   *tbox request ihu to sync discharge
   */
  TBOX__NET__MESSAGETYPE__REQUEST_SYNC_DISCHARGE = 66,
  /*
   *ihu response tbox result
   */
  TBOX__NET__MESSAGETYPE__REQUEST_SYNC_DISCHARGE_RESULT = 67,
  /*
   *ihu request tbox to restart sentinelmode
   */
  TBOX__NET__MESSAGETYPE__REQUEST_RESTART_SENTINELMODE = 68,
  /*
   *tbox response ihu result
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_RESTART_SENTINELMODE_RESULT = 69,
  /*
   *tbox request ihu to sync newwork status
   */
  TBOX__NET__MESSAGETYPE__REQUEST_SYNC_NETWORK_STATUS = 70,
  /*
   *ihu response tbox result
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_SYNC_NETWORK_STATUS_RESULT = 71,
  /*
   *ihu request tbox to set signal type
   */
  TBOX__NET__MESSAGETYPE__REQUEST_SET_SIGNALTYPE = 72,
  /*
   *tbox response ihu result
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_SET_SIGNALTYPE_RESULT = 73,
  /*
   *ihu request tbox to query signal type
   */
  TBOX__NET__MESSAGETYPE__REQUEST_QUERY_SIGNALTYPE = 74,
  /*
   *tbox response ihu result
   */
  TBOX__NET__MESSAGETYPE__RESPONSE_QUERY_SIGNALTYPE_RESULT = 75,
  /*
   *tbox request ihu to sync signal type
   */
  TBOX__NET__MESSAGETYPE__REQUEST_SYNC_SIGNALTYPE = 76,
  /*
   *ihu response tbox result
   */
  TBOX__NET__MESSAGETYPE__REQUEST_SYNC_SIGNALTYPE_RESULT = 77
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TBOX__NET__MESSAGETYPE)
} Tbox__Net__Messagetype;
typedef enum _Tbox__Net__NETWORKSENDOnOff {
  /*
   *no use,just for remove 0 in the enum
   */
  TBOX__NET__NETWORK__SEND__ON_OFF__NETWORK_UNKNOWN = 0,
  /*
   *start network signal send to IVI
   */
  TBOX__NET__NETWORK__SEND__ON_OFF__NETWORK_ON = 1,
  /*
   *stop
   */
  TBOX__NET__NETWORK__SEND__ON_OFF__NETWORK_OFF = 2,
  /*
   *Only send the network signal for one time
   */
  TBOX__NET__NETWORK__SEND__ON_OFF__NETWORK_ONCE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TBOX__NET__NETWORK__SEND__ON_OFF)
} Tbox__Net__NETWORKSENDOnOff;
typedef enum _Tbox__Net__SignalType {
  /*
   *no use,just for remove 0 in the enum
   */
  TBOX__NET__SIGNAL_TYPE__SIGNAL_UNKNOWN = 0,
  /*
   *no signal
   */
  TBOX__NET__SIGNAL_TYPE__NONE_SIGNAL = 1,
  /*
   *2G
   */
  TBOX__NET__SIGNAL_TYPE__GSM = 2,
  /*
   *3G
   */
  TBOX__NET__SIGNAL_TYPE__UMTS = 3,
  /*
   *4G
   */
  TBOX__NET__SIGNAL_TYPE__LTE = 4,
  /*
   *5G
   */
  TBOX__NET__SIGNAL_TYPE__NR5G = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TBOX__NET__SIGNAL_TYPE)
} Tbox__Net__SignalType;
typedef enum _Tbox__Net__CallType {
  /*
   *no use,just for remove 0 in the enum
   */
  TBOX__NET__CALL_TYPE__CALLTYPE_UNKNOWN = 0,
  TBOX__NET__CALL_TYPE__ECALL = 1,
  TBOX__NET__CALL_TYPE__BCALL = 2,
  TBOX__NET__CALL_TYPE__ICALL = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TBOX__NET__CALL_TYPE)
} Tbox__Net__CallType;
typedef enum _Tbox__Net__CallActionEnum {
  /*
   *no use,just for remove 0 in the enum
   */
  TBOX__NET__CALL_ACTION_ENUM__CALLACTION_UNKNOWN = 0,
  /*
   *start a CALL
   */
  TBOX__NET__CALL_ACTION_ENUM__START_CALL = 1,
  /*
   *end current CALL
   */
  TBOX__NET__CALL_ACTION_ENUM__END_CALL = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TBOX__NET__CALL_ACTION_ENUM)
} Tbox__Net__CallActionEnum;
typedef enum _Tbox__Net__CallActionResultEnum {
  /*
   *no use,just for remove 0 in the enum
   */
  TBOX__NET__CALL_ACTION_RESULT_ENUM__CALL_ACTION_UNKNOWN = 0,
  /*
   *request action success
   */
  TBOX__NET__CALL_ACTION_RESULT_ENUM__CALL_ACTION_SUCCESS = 1,
  /*
   *nonsupport the call
   */
  TBOX__NET__CALL_ACTION_RESULT_ENUM__CALL_ACTION_NONSUPPORT = 2,
  /*
   *start call failed because now a call is processing
   */
  TBOX__NET__CALL_ACTION_RESULT_ENUM__START_FAILED_CALL_PROCESSING = 3,
  /*
   *start call failed because other reasons
   */
  TBOX__NET__CALL_ACTION_RESULT_ENUM__START_FAILED_OTHER_ERROR = 4,
  /*
   *end current call failed because now no call
   */
  TBOX__NET__CALL_ACTION_RESULT_ENUM__END_FAILED_NO_CURRENT_CALL = 5,
  /*
   *end current call failed because other reasons
   */
  TBOX__NET__CALL_ACTION_RESULT_ENUM__END_FAILED_OTHER_ERROR = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TBOX__NET__CALL_ACTION_RESULT_ENUM)
} Tbox__Net__CallActionResultEnum;
typedef enum _Tbox__Net__CallStatusEnum {
  /*
   *no use,just for remove 0 in the enum
   */
  TBOX__NET__CALL_STATUS_ENUM__CALL_STATUS_UNKNOWN = 0,
  /*
   *call in
   */
  TBOX__NET__CALL_STATUS_ENUM__CALL_IN = 1,
  /*
   *call out
   */
  TBOX__NET__CALL_STATUS_ENUM__CALL_OUT = 2,
  /*
   *ring
   */
  TBOX__NET__CALL_STATUS_ENUM__CALL_RING = 3,
  /*
   *connect
   */
  TBOX__NET__CALL_STATUS_ENUM__CALL_CONNECTED = 4,
  /*
   *hang up
   */
  TBOX__NET__CALL_STATUS_ENUM__CALL_DISCONNECTED = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TBOX__NET__CALL_STATUS_ENUM)
} Tbox__Net__CallStatusEnum;
typedef enum _Tbox__Net__GPSSENDOnOff {
  /*
   *no use,just for remove 0 in the enum
   */
  TBOX__NET__GPS__SEND__ON_OFF__GPS_UNKNOWN = 0,
  /*
   *start GPS info send to IVI
   */
  TBOX__NET__GPS__SEND__ON_OFF__GPS_ON = 1,
  /*
   *stop
   */
  TBOX__NET__GPS__SEND__ON_OFF__GPS_OFF = 2,
  /*
   *Only send the GPS info for one time
   */
  TBOX__NET__GPS__SEND__ON_OFF__GPS_ONCE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TBOX__NET__GPS__SEND__ON_OFF)
} Tbox__Net__GPSSENDOnOff;
typedef enum _Tbox__Net__HEARTTYPE {
  /*
   *no use,just for remove 0 in the enum
   */
  TBOX__NET__HEART__TYPE__HEART_UNKNOWN = 0,
  /*
   *NMEA
   */
  TBOX__NET__HEART__TYPE__HEART_NMEA = 1,
  /*
   *3 call
   */
  TBOX__NET__HEART__TYPE__HEART_3CALL = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TBOX__NET__HEART__TYPE)
} Tbox__Net__HEARTTYPE;
typedef enum _Tbox__Net__DataTypeEnum {
  /*
   *no use,just for remove 0 in the enum
   */
  TBOX__NET__DATA_TYPE_ENUM__DATA_UNKNOWN = 0,
  TBOX__NET__DATA_TYPE_ENUM__PHOTO_TYPE = 1,
  TBOX__NET__DATA_TYPE_ENUM__VIDEO_TYPE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TBOX__NET__DATA_TYPE_ENUM)
} Tbox__Net__DataTypeEnum;
typedef enum _Tbox__Net__CameraNameEnum {
  /*
   *no use,just for remove 0 in the enum
   */
  TBOX__NET__CAMERA_NAME_ENUM__CAMERA_UNKNOWN = 0,
  TBOX__NET__CAMERA_NAME_ENUM__DVR_TYPE = 1,
  TBOX__NET__CAMERA_NAME_ENUM__DMS_TYPE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TBOX__NET__CAMERA_NAME_ENUM)
} Tbox__Net__CameraNameEnum;

/* --- messages --- */

struct  _Tbox__Net__TboxNetworkCtrl
{
  ProtobufCMessage base;
  protobuf_c_boolean has_onoff;
  Tbox__Net__NETWORKSENDOnOff onoff;
  protobuf_c_boolean has_time_cycle;
  uint32_t time_cycle;
};
#define TBOX__NET__TBOX_NETWORK_CTRL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__tbox_network_ctrl__descriptor) \
    , 0,0, 0,0 }


struct  _Tbox__Net__CallAction
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  Tbox__Net__CallType type;
  protobuf_c_boolean has_action;
  Tbox__Net__CallActionEnum action;
};
#define TBOX__NET__CALL_ACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__call_action__descriptor) \
    , 0,0, 0,0 }


struct  _Tbox__Net__CallActionResult
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  Tbox__Net__CallType type;
  protobuf_c_boolean has_action;
  Tbox__Net__CallActionEnum action;
  protobuf_c_boolean has_result;
  Tbox__Net__CallActionResultEnum result;
};
#define TBOX__NET__CALL_ACTION_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__call_action_result__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _Tbox__Net__CallStatus
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  Tbox__Net__CallType type;
  protobuf_c_boolean has_call_status;
  Tbox__Net__CallStatusEnum call_status;
  protobuf_c_boolean has_reserve;
  ProtobufCBinaryData reserve;
};
#define TBOX__NET__CALL_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__call_status__descriptor) \
    , 0,0, 0,0, 0,{0,NULL} }


struct  _Tbox__Net__TboxInfo
{
  ProtobufCMessage base;
  char *software_version;
  char *hardware_version;
  char *iccid;
  char *pdid;
  char *imei;
  char *vin;
};
#define TBOX__NET__TBOX_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__tbox_info__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL }


struct  _Tbox__Net__TboxGPSCmd
{
  ProtobufCMessage base;
  protobuf_c_boolean has_onoff;
  Tbox__Net__GPSSENDOnOff onoff;
  protobuf_c_boolean has_time_cycle;
  uint32_t time_cycle;
};
#define TBOX__NET__TBOX_GPSCMD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__tbox_gpscmd__descriptor) \
    , 0,0, 0,0 }


struct  _Tbox__Net__TboxGPSInfo
{
  ProtobufCMessage base;
  char *nmea;
};
#define TBOX__NET__TBOX_GPSINFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__tbox_gpsinfo__descriptor) \
    , NULL }


struct  _Tbox__Net__TboxActiveState
{
  ProtobufCMessage base;
  /*
   *true:activated   false:not active
   */
  protobuf_c_boolean has_active_state;
  protobuf_c_boolean active_state;
};
#define TBOX__NET__TBOX_ACTIVE_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__tbox_active_state__descriptor) \
    , 0,0 }


struct  _Tbox__Net__IhuHeartType
{
  ProtobufCMessage base;
  protobuf_c_boolean has_heart_type;
  Tbox__Net__HEARTTYPE heart_type;
};
#define TBOX__NET__IHU_HEART_TYPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__ihu_heart_type__descriptor) \
    , 0,0 }


struct  _Tbox__Net__TboxRemoteDiagnose
{
  ProtobufCMessage base;
  char *vin;
  protobuf_c_boolean has_eventid;
  uint32_t eventid;
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
  protobuf_c_boolean has_datatype;
  Tbox__Net__DataTypeEnum datatype;
  protobuf_c_boolean has_cameraname;
  Tbox__Net__CameraNameEnum cameraname;
  protobuf_c_boolean has_aid;
  uint32_t aid;
  protobuf_c_boolean has_mid;
  uint32_t mid;
  protobuf_c_boolean has_effectivetime;
  uint32_t effectivetime;
  protobuf_c_boolean has_sizelimit;
  uint32_t sizelimit;
};
#define TBOX__NET__TBOX_REMOTE_DIAGNOSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__tbox_remote_diagnose__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Tbox__Net__IhuLogfile
{
  ProtobufCMessage base;
  char *vin;
  protobuf_c_boolean has_eventid;
  uint32_t eventid;
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
  protobuf_c_boolean has_aid;
  uint32_t aid;
  protobuf_c_boolean has_mid;
  uint32_t mid;
  protobuf_c_boolean has_starttime;
  uint32_t starttime;
  protobuf_c_boolean has_durationtime;
  uint32_t durationtime;
  /*
   *1:TBOX, 2:IHU
   */
  protobuf_c_boolean has_channel;
  uint32_t channel;
  /*
   *1:ERROR, 2:WARN, 3:INFO, 4:DEBUG
   */
  protobuf_c_boolean has_level;
  uint32_t level;
};
#define TBOX__NET__IHU_LOGFILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__ihu_logfile__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Tbox__Net__IhuChargeAppoointmentSts
{
  ProtobufCMessage base;
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
  protobuf_c_boolean has_hour;
  uint32_t hour;
  protobuf_c_boolean has_min;
  uint32_t min;
  protobuf_c_boolean has_id;
  uint32_t id;
  protobuf_c_boolean has_targetpower;
  uint32_t targetpower;
  /*
   *min 
   */
  protobuf_c_boolean has_longtime;
  uint32_t longtime;
  /*
   *true:effective, false:Invalid
   */
  protobuf_c_boolean has_effectivestate;
  protobuf_c_boolean effectivestate;
  protobuf_c_boolean has_iscontinuecharge;
  protobuf_c_boolean iscontinuecharge;
};
#define TBOX__NET__IHU_CHARGE_APPOOINTMENT_STS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__ihu_charge_appoointment_sts__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Tbox__Net__TboxChargeAppoointmentSet
{
  ProtobufCMessage base;
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
  protobuf_c_boolean has_hour;
  uint32_t hour;
  protobuf_c_boolean has_min;
  uint32_t min;
  protobuf_c_boolean has_id;
  uint32_t id;
  protobuf_c_boolean has_targetpower;
  uint32_t targetpower;
  /*
   *min 
   */
  protobuf_c_boolean has_longtime;
  uint32_t longtime;
  /*
   *true:effective, false:Invalid
   */
  protobuf_c_boolean has_effectivestate;
  protobuf_c_boolean effectivestate;
  protobuf_c_boolean has_iscontinuecharge;
  protobuf_c_boolean iscontinuecharge;
};
#define TBOX__NET__TBOX_CHARGE_APPOOINTMENT_SET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__tbox_charge_appoointment_set__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Tbox__Net__TboxChargeCtrl
{
  ProtobufCMessage base;
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
  /*
   *0: stop, 1:start
   */
  protobuf_c_boolean has_commend;
  protobuf_c_boolean commend;
  protobuf_c_boolean has_targetpower;
  uint32_t targetpower;
};
#define TBOX__NET__TBOX_CHARGE_CTRL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__tbox_charge_ctrl__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _Tbox__Net__TboxChargeRecord
{
  ProtobufCMessage base;
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
  protobuf_c_boolean has_hour;
  uint32_t hour;
  protobuf_c_boolean has_min;
  uint32_t min;
  protobuf_c_boolean has_id;
  uint32_t id;
  protobuf_c_boolean has_targetpower;
  uint32_t targetpower;
  /*
   *min 
   */
  protobuf_c_boolean has_longtime;
  uint32_t longtime;
  /*
   *true:effective, false:Invalid
   */
  protobuf_c_boolean has_effectivestate;
  protobuf_c_boolean effectivestate;
  protobuf_c_boolean has_iscontinuecharge;
  protobuf_c_boolean iscontinuecharge;
};
#define TBOX__NET__TBOX_CHARGE_RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__tbox_charge_record__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Tbox__Net__SetTboxBatteryMode
{
  ProtobufCMessage base;
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
  /*
   *0: health-80, 1:long distance-100, 2:health-90
   */
  protobuf_c_boolean has_mode;
  uint32_t mode;
};
#define TBOX__NET__SET_TBOX_BATTERY_MODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__set_tbox_battery_mode__descriptor) \
    , 0,0, 0,0 }


struct  _Tbox__Net__TboxBatteryModeResult
{
  ProtobufCMessage base;
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
  /*
   *0:set failed, 1: set successful and take effect next time, 2:set successful and take effect this time
   */
  protobuf_c_boolean has_result;
  uint32_t result;
};
#define TBOX__NET__TBOX_BATTERY_MODE_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__tbox_battery_mode_result__descriptor) \
    , 0,0, 0,0 }


struct  _Tbox__Net__StartSentinelMode
{
  ProtobufCMessage base;
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
  /*
   *0: SentinelMode, 1:360 find car, 2:biological detection
   */
  protobuf_c_boolean has_mode;
  uint32_t mode;
  /*
   *0: video, 1:photo
   */
  protobuf_c_boolean has_type;
  uint32_t type;
  char *vin;
  char *url;
  char *filename;
  protobuf_c_boolean has_eventid;
  uint32_t eventid;
};
#define TBOX__NET__START_SENTINEL_MODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__start_sentinel_mode__descriptor) \
    , 0,0, 0,0, 0,0, NULL, NULL, NULL, 0,0 }


struct  _Tbox__Net__EndSentinelMode
{
  ProtobufCMessage base;
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
  /*
   *0: SentinelMode, 1:360 find car, 2:biological detection
   */
  protobuf_c_boolean has_mode;
  uint32_t mode;
  /*
   *true:successful , false:failed
   */
  protobuf_c_boolean has_uploadsts;
  protobuf_c_boolean uploadsts;
  char *filename;
  protobuf_c_boolean has_eventid;
  uint32_t eventid;
};
#define TBOX__NET__END_SENTINEL_MODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__end_sentinel_mode__descriptor) \
    , 0,0, 0,0, 0,0, NULL, 0,0 }


struct  _Tbox__Net__ReStartSentinelMode
{
  ProtobufCMessage base;
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
  /*
   *0:SentinelMode, 1:360 find car, 2:biological detection
   */
  protobuf_c_boolean has_mode;
  uint32_t mode;
  /*
   *0: air-conditioning has opened 4 hours;  1: SOC is lower 20%
   */
  protobuf_c_boolean has_resaon;
  uint32_t resaon;
};
#define TBOX__NET__RE_START_SENTINEL_MODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__re_start_sentinel_mode__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _Tbox__Net__BattHeatSingle
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
  protobuf_c_boolean has_hour;
  uint32_t hour;
  protobuf_c_boolean has_min;
  uint32_t min;
  /*
   *0-255: cycle
   */
  protobuf_c_boolean has_cycle;
  uint32_t cycle;
};
#define TBOX__NET__BATT_HEAT_SINGLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__batt_heat_single__descriptor) \
    , 0,0, 0,0, 0,0, 0,0 }


struct  _Tbox__Net__SetBattHeatMode
{
  ProtobufCMessage base;
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
  protobuf_c_boolean has_id;
  uint32_t id;
  protobuf_c_boolean has_hour;
  uint32_t hour;
  protobuf_c_boolean has_min;
  uint32_t min;
  /*
   *0: add, 1: modify, 2: delete
   */
  protobuf_c_boolean has_event;
  uint32_t event;
  /*
   *0: off, 1: charge heat, 2: appointment heat
   */
  protobuf_c_boolean has_mode;
  uint32_t mode;
  /*
   *0-255: cycle
   */
  protobuf_c_boolean has_cycle;
  uint32_t cycle;
};
#define TBOX__NET__SET_BATT_HEAT_MODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__set_batt_heat_mode__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Tbox__Net__BattHeatModeRecord
{
  ProtobufCMessage base;
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
  size_t n_battheatlist;
  Tbox__Net__BattHeatSingle **battheatlist;
  /*
   *0: off, 1: charge heat, 2: appointment heat
   */
  protobuf_c_boolean has_mode;
  uint32_t mode;
};
#define TBOX__NET__BATT_HEAT_MODE_RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__batt_heat_mode_record__descriptor) \
    , 0,0, 0,NULL, 0,0 }


struct  _Tbox__Net__SetBattHeatModeResult
{
  ProtobufCMessage base;
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
  /*
   *0:set failed, 1: set successful 
   */
  protobuf_c_boolean has_result;
  uint32_t result;
};
#define TBOX__NET__SET_BATT_HEAT_MODE_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__set_batt_heat_mode_result__descriptor) \
    , 0,0, 0,0 }


struct  _Tbox__Net__ParkingRoute
{
  ProtobufCMessage base;
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
  protobuf_c_boolean has_id;
  uint32_t id;
  char *name;
  char *data;
  /*
   *0: add, 1: modify, 2: delete
   */
  protobuf_c_boolean has_event;
  uint32_t event;
};
#define TBOX__NET__PARKING_ROUTE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__parking_route__descriptor) \
    , 0,0, 0,0, NULL, NULL, 0,0 }


struct  _Tbox__Net__ParkingRouteSingle
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
  char *name;
  char *data;
};
#define TBOX__NET__PARKING_ROUTE_SINGLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__parking_route_single__descriptor) \
    , 0,0, NULL, NULL }


struct  _Tbox__Net__ParkingRouteRecord
{
  ProtobufCMessage base;
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
  size_t n_parkingroutelist;
  Tbox__Net__ParkingRouteSingle **parkingroutelist;
};
#define TBOX__NET__PARKING_ROUTE_RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__parking_route_record__descriptor) \
    , 0,0, 0,NULL }


struct  _Tbox__Net__SecurityGuard
{
  ProtobufCMessage base;
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
  protobuf_c_boolean has_valetmode;
  uint32_t valetmode;
  protobuf_c_boolean has_stealthmode;
  uint32_t stealthmode;
};
#define TBOX__NET__SECURITY_GUARD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__security_guard__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _Tbox__Net__DischargeState
{
  ProtobufCMessage base;
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
  /*
   *0: stop, 1:start
   */
  protobuf_c_boolean has_command;
  protobuf_c_boolean command;
  /*
   *0-100
   */
  protobuf_c_boolean has_targetpower;
  uint32_t targetpower;
};
#define TBOX__NET__DISCHARGE_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__discharge_state__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _Tbox__Net__NetworkStatus
{
  ProtobufCMessage base;
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
  /*
   *0: apn1, 1:apn2
   */
  protobuf_c_boolean has_channel;
  uint32_t channel;
  /*
   *0:error, 1:ok
   */
  protobuf_c_boolean has_networksts;
  uint32_t networksts;
};
#define TBOX__NET__NETWORK_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__network_status__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _Tbox__Net__TboxSignalType
{
  ProtobufCMessage base;
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
  /*
   *0: AUTO, 1:5G, 2:4G/5G, 3:4G, 4:3G, 5:2G
   */
  protobuf_c_boolean has_signaltype;
  uint32_t signaltype;
};
#define TBOX__NET__TBOX_SIGNAL_TYPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__tbox_signal_type__descriptor) \
    , 0,0, 0,0 }


struct  _Tbox__Net__MsgResult
{
  ProtobufCMessage base;
  /*
   *true:success    flase:failed
   */
  protobuf_c_boolean has_result;
  protobuf_c_boolean result;
  /*
   *none-error, dealing with failures and so on
   */
  protobuf_c_boolean has_error_code;
  ProtobufCBinaryData error_code;
};
#define TBOX__NET__MSG_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__msg_result__descriptor) \
    , 0,0, 0,{0,NULL} }


struct  _Tbox__Net__TopMessage
{
  ProtobufCMessage base;
  /*
   *message type
   */
  protobuf_c_boolean has_message_type;
  Tbox__Net__Messagetype message_type;
  /*
   *current signal type
   */
  protobuf_c_boolean has_signal_type;
  Tbox__Net__SignalType signal_type;
  /*
   *current signal strength, 0-5, 0 means no signal, 5 means strong strength
   */
  protobuf_c_boolean has_signal_power;
  int32_t signal_power;
  Tbox__Net__TboxNetworkCtrl *tbox_network_ctrl;
  Tbox__Net__CallAction *call_action;
  Tbox__Net__CallStatus *call_status;
  Tbox__Net__CallActionResult *call_result;
  Tbox__Net__TboxInfo *tbox_info;
  Tbox__Net__TboxGPSCmd *tbox_gps_ctrl;
  Tbox__Net__TboxGPSInfo *tbox_gpsinfo;
  Tbox__Net__TboxActiveState *tbox_activestate;
  Tbox__Net__TboxRemoteDiagnose *tbox_remotedaignose;
  Tbox__Net__MsgResult *msg_result;
  Tbox__Net__IhuLogfile *ihu_logfile;
  Tbox__Net__IhuChargeAppoointmentSts *ihu_charge_appoointmentsts;
  Tbox__Net__TboxChargeAppoointmentSet *tbox_charge_appoointmentset;
  Tbox__Net__TboxChargeCtrl *tbox_chargectrl;
  Tbox__Net__TboxChargeRecord *tbox_charge_record;
  Tbox__Net__SetTboxBatteryMode *set_tbox_battery_mode;
  Tbox__Net__TboxBatteryModeResult *tbox_battery_mode_result;
  Tbox__Net__IhuHeartType *ihu_heart_type;
  Tbox__Net__StartSentinelMode *start_sentinel_mode;
  Tbox__Net__EndSentinelMode *end_sentinel_mode;
  Tbox__Net__SetBattHeatMode *set_batt_heat_mode;
  Tbox__Net__SetBattHeatModeResult *set_battheatmode_result;
  Tbox__Net__ParkingRoute *parking_route;
  Tbox__Net__BattHeatModeRecord *battheatmode_record;
  Tbox__Net__ParkingRouteRecord *parkingroute_record;
  Tbox__Net__SecurityGuard *security_guard;
  Tbox__Net__DischargeState *discharge_state;
  Tbox__Net__ReStartSentinelMode *restart_sentinel_mode;
  Tbox__Net__NetworkStatus *network_status;
  Tbox__Net__TboxSignalType *tbox_signal_type;
};
#define TBOX__NET__TOP_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tbox__net__top_message__descriptor) \
    , 0,0, 0,0, 0,0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/* Tbox__Net__TboxNetworkCtrl methods */
void   tbox__net__tbox_network_ctrl__init
                     (Tbox__Net__TboxNetworkCtrl         *message);
size_t tbox__net__tbox_network_ctrl__get_packed_size
                     (const Tbox__Net__TboxNetworkCtrl   *message);
size_t tbox__net__tbox_network_ctrl__pack
                     (const Tbox__Net__TboxNetworkCtrl   *message,
                      uint8_t             *out);
size_t tbox__net__tbox_network_ctrl__pack_to_buffer
                     (const Tbox__Net__TboxNetworkCtrl   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__TboxNetworkCtrl *
       tbox__net__tbox_network_ctrl__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__tbox_network_ctrl__free_unpacked
                     (Tbox__Net__TboxNetworkCtrl *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__CallAction methods */
void   tbox__net__call_action__init
                     (Tbox__Net__CallAction         *message);
size_t tbox__net__call_action__get_packed_size
                     (const Tbox__Net__CallAction   *message);
size_t tbox__net__call_action__pack
                     (const Tbox__Net__CallAction   *message,
                      uint8_t             *out);
size_t tbox__net__call_action__pack_to_buffer
                     (const Tbox__Net__CallAction   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__CallAction *
       tbox__net__call_action__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__call_action__free_unpacked
                     (Tbox__Net__CallAction *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__CallActionResult methods */
void   tbox__net__call_action_result__init
                     (Tbox__Net__CallActionResult         *message);
size_t tbox__net__call_action_result__get_packed_size
                     (const Tbox__Net__CallActionResult   *message);
size_t tbox__net__call_action_result__pack
                     (const Tbox__Net__CallActionResult   *message,
                      uint8_t             *out);
size_t tbox__net__call_action_result__pack_to_buffer
                     (const Tbox__Net__CallActionResult   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__CallActionResult *
       tbox__net__call_action_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__call_action_result__free_unpacked
                     (Tbox__Net__CallActionResult *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__CallStatus methods */
void   tbox__net__call_status__init
                     (Tbox__Net__CallStatus         *message);
size_t tbox__net__call_status__get_packed_size
                     (const Tbox__Net__CallStatus   *message);
size_t tbox__net__call_status__pack
                     (const Tbox__Net__CallStatus   *message,
                      uint8_t             *out);
size_t tbox__net__call_status__pack_to_buffer
                     (const Tbox__Net__CallStatus   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__CallStatus *
       tbox__net__call_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__call_status__free_unpacked
                     (Tbox__Net__CallStatus *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__TboxInfo methods */
void   tbox__net__tbox_info__init
                     (Tbox__Net__TboxInfo         *message);
size_t tbox__net__tbox_info__get_packed_size
                     (const Tbox__Net__TboxInfo   *message);
size_t tbox__net__tbox_info__pack
                     (const Tbox__Net__TboxInfo   *message,
                      uint8_t             *out);
size_t tbox__net__tbox_info__pack_to_buffer
                     (const Tbox__Net__TboxInfo   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__TboxInfo *
       tbox__net__tbox_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__tbox_info__free_unpacked
                     (Tbox__Net__TboxInfo *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__TboxGPSCmd methods */
void   tbox__net__tbox_gpscmd__init
                     (Tbox__Net__TboxGPSCmd         *message);
size_t tbox__net__tbox_gpscmd__get_packed_size
                     (const Tbox__Net__TboxGPSCmd   *message);
size_t tbox__net__tbox_gpscmd__pack
                     (const Tbox__Net__TboxGPSCmd   *message,
                      uint8_t             *out);
size_t tbox__net__tbox_gpscmd__pack_to_buffer
                     (const Tbox__Net__TboxGPSCmd   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__TboxGPSCmd *
       tbox__net__tbox_gpscmd__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__tbox_gpscmd__free_unpacked
                     (Tbox__Net__TboxGPSCmd *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__TboxGPSInfo methods */
void   tbox__net__tbox_gpsinfo__init
                     (Tbox__Net__TboxGPSInfo         *message);
size_t tbox__net__tbox_gpsinfo__get_packed_size
                     (const Tbox__Net__TboxGPSInfo   *message);
size_t tbox__net__tbox_gpsinfo__pack
                     (const Tbox__Net__TboxGPSInfo   *message,
                      uint8_t             *out);
size_t tbox__net__tbox_gpsinfo__pack_to_buffer
                     (const Tbox__Net__TboxGPSInfo   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__TboxGPSInfo *
       tbox__net__tbox_gpsinfo__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__tbox_gpsinfo__free_unpacked
                     (Tbox__Net__TboxGPSInfo *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__TboxActiveState methods */
void   tbox__net__tbox_active_state__init
                     (Tbox__Net__TboxActiveState         *message);
size_t tbox__net__tbox_active_state__get_packed_size
                     (const Tbox__Net__TboxActiveState   *message);
size_t tbox__net__tbox_active_state__pack
                     (const Tbox__Net__TboxActiveState   *message,
                      uint8_t             *out);
size_t tbox__net__tbox_active_state__pack_to_buffer
                     (const Tbox__Net__TboxActiveState   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__TboxActiveState *
       tbox__net__tbox_active_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__tbox_active_state__free_unpacked
                     (Tbox__Net__TboxActiveState *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__IhuHeartType methods */
void   tbox__net__ihu_heart_type__init
                     (Tbox__Net__IhuHeartType         *message);
size_t tbox__net__ihu_heart_type__get_packed_size
                     (const Tbox__Net__IhuHeartType   *message);
size_t tbox__net__ihu_heart_type__pack
                     (const Tbox__Net__IhuHeartType   *message,
                      uint8_t             *out);
size_t tbox__net__ihu_heart_type__pack_to_buffer
                     (const Tbox__Net__IhuHeartType   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__IhuHeartType *
       tbox__net__ihu_heart_type__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__ihu_heart_type__free_unpacked
                     (Tbox__Net__IhuHeartType *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__TboxRemoteDiagnose methods */
void   tbox__net__tbox_remote_diagnose__init
                     (Tbox__Net__TboxRemoteDiagnose         *message);
size_t tbox__net__tbox_remote_diagnose__get_packed_size
                     (const Tbox__Net__TboxRemoteDiagnose   *message);
size_t tbox__net__tbox_remote_diagnose__pack
                     (const Tbox__Net__TboxRemoteDiagnose   *message,
                      uint8_t             *out);
size_t tbox__net__tbox_remote_diagnose__pack_to_buffer
                     (const Tbox__Net__TboxRemoteDiagnose   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__TboxRemoteDiagnose *
       tbox__net__tbox_remote_diagnose__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__tbox_remote_diagnose__free_unpacked
                     (Tbox__Net__TboxRemoteDiagnose *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__IhuLogfile methods */
void   tbox__net__ihu_logfile__init
                     (Tbox__Net__IhuLogfile         *message);
size_t tbox__net__ihu_logfile__get_packed_size
                     (const Tbox__Net__IhuLogfile   *message);
size_t tbox__net__ihu_logfile__pack
                     (const Tbox__Net__IhuLogfile   *message,
                      uint8_t             *out);
size_t tbox__net__ihu_logfile__pack_to_buffer
                     (const Tbox__Net__IhuLogfile   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__IhuLogfile *
       tbox__net__ihu_logfile__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__ihu_logfile__free_unpacked
                     (Tbox__Net__IhuLogfile *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__IhuChargeAppoointmentSts methods */
void   tbox__net__ihu_charge_appoointment_sts__init
                     (Tbox__Net__IhuChargeAppoointmentSts         *message);
size_t tbox__net__ihu_charge_appoointment_sts__get_packed_size
                     (const Tbox__Net__IhuChargeAppoointmentSts   *message);
size_t tbox__net__ihu_charge_appoointment_sts__pack
                     (const Tbox__Net__IhuChargeAppoointmentSts   *message,
                      uint8_t             *out);
size_t tbox__net__ihu_charge_appoointment_sts__pack_to_buffer
                     (const Tbox__Net__IhuChargeAppoointmentSts   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__IhuChargeAppoointmentSts *
       tbox__net__ihu_charge_appoointment_sts__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__ihu_charge_appoointment_sts__free_unpacked
                     (Tbox__Net__IhuChargeAppoointmentSts *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__TboxChargeAppoointmentSet methods */
void   tbox__net__tbox_charge_appoointment_set__init
                     (Tbox__Net__TboxChargeAppoointmentSet         *message);
size_t tbox__net__tbox_charge_appoointment_set__get_packed_size
                     (const Tbox__Net__TboxChargeAppoointmentSet   *message);
size_t tbox__net__tbox_charge_appoointment_set__pack
                     (const Tbox__Net__TboxChargeAppoointmentSet   *message,
                      uint8_t             *out);
size_t tbox__net__tbox_charge_appoointment_set__pack_to_buffer
                     (const Tbox__Net__TboxChargeAppoointmentSet   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__TboxChargeAppoointmentSet *
       tbox__net__tbox_charge_appoointment_set__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__tbox_charge_appoointment_set__free_unpacked
                     (Tbox__Net__TboxChargeAppoointmentSet *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__TboxChargeCtrl methods */
void   tbox__net__tbox_charge_ctrl__init
                     (Tbox__Net__TboxChargeCtrl         *message);
size_t tbox__net__tbox_charge_ctrl__get_packed_size
                     (const Tbox__Net__TboxChargeCtrl   *message);
size_t tbox__net__tbox_charge_ctrl__pack
                     (const Tbox__Net__TboxChargeCtrl   *message,
                      uint8_t             *out);
size_t tbox__net__tbox_charge_ctrl__pack_to_buffer
                     (const Tbox__Net__TboxChargeCtrl   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__TboxChargeCtrl *
       tbox__net__tbox_charge_ctrl__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__tbox_charge_ctrl__free_unpacked
                     (Tbox__Net__TboxChargeCtrl *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__TboxChargeRecord methods */
void   tbox__net__tbox_charge_record__init
                     (Tbox__Net__TboxChargeRecord         *message);
size_t tbox__net__tbox_charge_record__get_packed_size
                     (const Tbox__Net__TboxChargeRecord   *message);
size_t tbox__net__tbox_charge_record__pack
                     (const Tbox__Net__TboxChargeRecord   *message,
                      uint8_t             *out);
size_t tbox__net__tbox_charge_record__pack_to_buffer
                     (const Tbox__Net__TboxChargeRecord   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__TboxChargeRecord *
       tbox__net__tbox_charge_record__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__tbox_charge_record__free_unpacked
                     (Tbox__Net__TboxChargeRecord *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__SetTboxBatteryMode methods */
void   tbox__net__set_tbox_battery_mode__init
                     (Tbox__Net__SetTboxBatteryMode         *message);
size_t tbox__net__set_tbox_battery_mode__get_packed_size
                     (const Tbox__Net__SetTboxBatteryMode   *message);
size_t tbox__net__set_tbox_battery_mode__pack
                     (const Tbox__Net__SetTboxBatteryMode   *message,
                      uint8_t             *out);
size_t tbox__net__set_tbox_battery_mode__pack_to_buffer
                     (const Tbox__Net__SetTboxBatteryMode   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__SetTboxBatteryMode *
       tbox__net__set_tbox_battery_mode__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__set_tbox_battery_mode__free_unpacked
                     (Tbox__Net__SetTboxBatteryMode *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__TboxBatteryModeResult methods */
void   tbox__net__tbox_battery_mode_result__init
                     (Tbox__Net__TboxBatteryModeResult         *message);
size_t tbox__net__tbox_battery_mode_result__get_packed_size
                     (const Tbox__Net__TboxBatteryModeResult   *message);
size_t tbox__net__tbox_battery_mode_result__pack
                     (const Tbox__Net__TboxBatteryModeResult   *message,
                      uint8_t             *out);
size_t tbox__net__tbox_battery_mode_result__pack_to_buffer
                     (const Tbox__Net__TboxBatteryModeResult   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__TboxBatteryModeResult *
       tbox__net__tbox_battery_mode_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__tbox_battery_mode_result__free_unpacked
                     (Tbox__Net__TboxBatteryModeResult *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__StartSentinelMode methods */
void   tbox__net__start_sentinel_mode__init
                     (Tbox__Net__StartSentinelMode         *message);
size_t tbox__net__start_sentinel_mode__get_packed_size
                     (const Tbox__Net__StartSentinelMode   *message);
size_t tbox__net__start_sentinel_mode__pack
                     (const Tbox__Net__StartSentinelMode   *message,
                      uint8_t             *out);
size_t tbox__net__start_sentinel_mode__pack_to_buffer
                     (const Tbox__Net__StartSentinelMode   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__StartSentinelMode *
       tbox__net__start_sentinel_mode__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__start_sentinel_mode__free_unpacked
                     (Tbox__Net__StartSentinelMode *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__EndSentinelMode methods */
void   tbox__net__end_sentinel_mode__init
                     (Tbox__Net__EndSentinelMode         *message);
size_t tbox__net__end_sentinel_mode__get_packed_size
                     (const Tbox__Net__EndSentinelMode   *message);
size_t tbox__net__end_sentinel_mode__pack
                     (const Tbox__Net__EndSentinelMode   *message,
                      uint8_t             *out);
size_t tbox__net__end_sentinel_mode__pack_to_buffer
                     (const Tbox__Net__EndSentinelMode   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__EndSentinelMode *
       tbox__net__end_sentinel_mode__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__end_sentinel_mode__free_unpacked
                     (Tbox__Net__EndSentinelMode *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__ReStartSentinelMode methods */
void   tbox__net__re_start_sentinel_mode__init
                     (Tbox__Net__ReStartSentinelMode         *message);
size_t tbox__net__re_start_sentinel_mode__get_packed_size
                     (const Tbox__Net__ReStartSentinelMode   *message);
size_t tbox__net__re_start_sentinel_mode__pack
                     (const Tbox__Net__ReStartSentinelMode   *message,
                      uint8_t             *out);
size_t tbox__net__re_start_sentinel_mode__pack_to_buffer
                     (const Tbox__Net__ReStartSentinelMode   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__ReStartSentinelMode *
       tbox__net__re_start_sentinel_mode__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__re_start_sentinel_mode__free_unpacked
                     (Tbox__Net__ReStartSentinelMode *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__BattHeatSingle methods */
void   tbox__net__batt_heat_single__init
                     (Tbox__Net__BattHeatSingle         *message);
size_t tbox__net__batt_heat_single__get_packed_size
                     (const Tbox__Net__BattHeatSingle   *message);
size_t tbox__net__batt_heat_single__pack
                     (const Tbox__Net__BattHeatSingle   *message,
                      uint8_t             *out);
size_t tbox__net__batt_heat_single__pack_to_buffer
                     (const Tbox__Net__BattHeatSingle   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__BattHeatSingle *
       tbox__net__batt_heat_single__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__batt_heat_single__free_unpacked
                     (Tbox__Net__BattHeatSingle *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__SetBattHeatMode methods */
void   tbox__net__set_batt_heat_mode__init
                     (Tbox__Net__SetBattHeatMode         *message);
size_t tbox__net__set_batt_heat_mode__get_packed_size
                     (const Tbox__Net__SetBattHeatMode   *message);
size_t tbox__net__set_batt_heat_mode__pack
                     (const Tbox__Net__SetBattHeatMode   *message,
                      uint8_t             *out);
size_t tbox__net__set_batt_heat_mode__pack_to_buffer
                     (const Tbox__Net__SetBattHeatMode   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__SetBattHeatMode *
       tbox__net__set_batt_heat_mode__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__set_batt_heat_mode__free_unpacked
                     (Tbox__Net__SetBattHeatMode *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__BattHeatModeRecord methods */
void   tbox__net__batt_heat_mode_record__init
                     (Tbox__Net__BattHeatModeRecord         *message);
size_t tbox__net__batt_heat_mode_record__get_packed_size
                     (const Tbox__Net__BattHeatModeRecord   *message);
size_t tbox__net__batt_heat_mode_record__pack
                     (const Tbox__Net__BattHeatModeRecord   *message,
                      uint8_t             *out);
size_t tbox__net__batt_heat_mode_record__pack_to_buffer
                     (const Tbox__Net__BattHeatModeRecord   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__BattHeatModeRecord *
       tbox__net__batt_heat_mode_record__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__batt_heat_mode_record__free_unpacked
                     (Tbox__Net__BattHeatModeRecord *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__SetBattHeatModeResult methods */
void   tbox__net__set_batt_heat_mode_result__init
                     (Tbox__Net__SetBattHeatModeResult         *message);
size_t tbox__net__set_batt_heat_mode_result__get_packed_size
                     (const Tbox__Net__SetBattHeatModeResult   *message);
size_t tbox__net__set_batt_heat_mode_result__pack
                     (const Tbox__Net__SetBattHeatModeResult   *message,
                      uint8_t             *out);
size_t tbox__net__set_batt_heat_mode_result__pack_to_buffer
                     (const Tbox__Net__SetBattHeatModeResult   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__SetBattHeatModeResult *
       tbox__net__set_batt_heat_mode_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__set_batt_heat_mode_result__free_unpacked
                     (Tbox__Net__SetBattHeatModeResult *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__ParkingRoute methods */
void   tbox__net__parking_route__init
                     (Tbox__Net__ParkingRoute         *message);
size_t tbox__net__parking_route__get_packed_size
                     (const Tbox__Net__ParkingRoute   *message);
size_t tbox__net__parking_route__pack
                     (const Tbox__Net__ParkingRoute   *message,
                      uint8_t             *out);
size_t tbox__net__parking_route__pack_to_buffer
                     (const Tbox__Net__ParkingRoute   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__ParkingRoute *
       tbox__net__parking_route__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__parking_route__free_unpacked
                     (Tbox__Net__ParkingRoute *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__ParkingRouteSingle methods */
void   tbox__net__parking_route_single__init
                     (Tbox__Net__ParkingRouteSingle         *message);
size_t tbox__net__parking_route_single__get_packed_size
                     (const Tbox__Net__ParkingRouteSingle   *message);
size_t tbox__net__parking_route_single__pack
                     (const Tbox__Net__ParkingRouteSingle   *message,
                      uint8_t             *out);
size_t tbox__net__parking_route_single__pack_to_buffer
                     (const Tbox__Net__ParkingRouteSingle   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__ParkingRouteSingle *
       tbox__net__parking_route_single__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__parking_route_single__free_unpacked
                     (Tbox__Net__ParkingRouteSingle *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__ParkingRouteRecord methods */
void   tbox__net__parking_route_record__init
                     (Tbox__Net__ParkingRouteRecord         *message);
size_t tbox__net__parking_route_record__get_packed_size
                     (const Tbox__Net__ParkingRouteRecord   *message);
size_t tbox__net__parking_route_record__pack
                     (const Tbox__Net__ParkingRouteRecord   *message,
                      uint8_t             *out);
size_t tbox__net__parking_route_record__pack_to_buffer
                     (const Tbox__Net__ParkingRouteRecord   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__ParkingRouteRecord *
       tbox__net__parking_route_record__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__parking_route_record__free_unpacked
                     (Tbox__Net__ParkingRouteRecord *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__SecurityGuard methods */
void   tbox__net__security_guard__init
                     (Tbox__Net__SecurityGuard         *message);
size_t tbox__net__security_guard__get_packed_size
                     (const Tbox__Net__SecurityGuard   *message);
size_t tbox__net__security_guard__pack
                     (const Tbox__Net__SecurityGuard   *message,
                      uint8_t             *out);
size_t tbox__net__security_guard__pack_to_buffer
                     (const Tbox__Net__SecurityGuard   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__SecurityGuard *
       tbox__net__security_guard__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__security_guard__free_unpacked
                     (Tbox__Net__SecurityGuard *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__DischargeState methods */
void   tbox__net__discharge_state__init
                     (Tbox__Net__DischargeState         *message);
size_t tbox__net__discharge_state__get_packed_size
                     (const Tbox__Net__DischargeState   *message);
size_t tbox__net__discharge_state__pack
                     (const Tbox__Net__DischargeState   *message,
                      uint8_t             *out);
size_t tbox__net__discharge_state__pack_to_buffer
                     (const Tbox__Net__DischargeState   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__DischargeState *
       tbox__net__discharge_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__discharge_state__free_unpacked
                     (Tbox__Net__DischargeState *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__NetworkStatus methods */
void   tbox__net__network_status__init
                     (Tbox__Net__NetworkStatus         *message);
size_t tbox__net__network_status__get_packed_size
                     (const Tbox__Net__NetworkStatus   *message);
size_t tbox__net__network_status__pack
                     (const Tbox__Net__NetworkStatus   *message,
                      uint8_t             *out);
size_t tbox__net__network_status__pack_to_buffer
                     (const Tbox__Net__NetworkStatus   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__NetworkStatus *
       tbox__net__network_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__network_status__free_unpacked
                     (Tbox__Net__NetworkStatus *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__TboxSignalType methods */
void   tbox__net__tbox_signal_type__init
                     (Tbox__Net__TboxSignalType         *message);
size_t tbox__net__tbox_signal_type__get_packed_size
                     (const Tbox__Net__TboxSignalType   *message);
size_t tbox__net__tbox_signal_type__pack
                     (const Tbox__Net__TboxSignalType   *message,
                      uint8_t             *out);
size_t tbox__net__tbox_signal_type__pack_to_buffer
                     (const Tbox__Net__TboxSignalType   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__TboxSignalType *
       tbox__net__tbox_signal_type__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__tbox_signal_type__free_unpacked
                     (Tbox__Net__TboxSignalType *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__MsgResult methods */
void   tbox__net__msg_result__init
                     (Tbox__Net__MsgResult         *message);
size_t tbox__net__msg_result__get_packed_size
                     (const Tbox__Net__MsgResult   *message);
size_t tbox__net__msg_result__pack
                     (const Tbox__Net__MsgResult   *message,
                      uint8_t             *out);
size_t tbox__net__msg_result__pack_to_buffer
                     (const Tbox__Net__MsgResult   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__MsgResult *
       tbox__net__msg_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__msg_result__free_unpacked
                     (Tbox__Net__MsgResult *message,
                      ProtobufCAllocator *allocator);
/* Tbox__Net__TopMessage methods */
void   tbox__net__top_message__init
                     (Tbox__Net__TopMessage         *message);
size_t tbox__net__top_message__get_packed_size
                     (const Tbox__Net__TopMessage   *message);
size_t tbox__net__top_message__pack
                     (const Tbox__Net__TopMessage   *message,
                      uint8_t             *out);
size_t tbox__net__top_message__pack_to_buffer
                     (const Tbox__Net__TopMessage   *message,
                      ProtobufCBuffer     *buffer);
Tbox__Net__TopMessage *
       tbox__net__top_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tbox__net__top_message__free_unpacked
                     (Tbox__Net__TopMessage *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Tbox__Net__TboxNetworkCtrl_Closure)
                 (const Tbox__Net__TboxNetworkCtrl *message,
                  void *closure_data);
typedef void (*Tbox__Net__CallAction_Closure)
                 (const Tbox__Net__CallAction *message,
                  void *closure_data);
typedef void (*Tbox__Net__CallActionResult_Closure)
                 (const Tbox__Net__CallActionResult *message,
                  void *closure_data);
typedef void (*Tbox__Net__CallStatus_Closure)
                 (const Tbox__Net__CallStatus *message,
                  void *closure_data);
typedef void (*Tbox__Net__TboxInfo_Closure)
                 (const Tbox__Net__TboxInfo *message,
                  void *closure_data);
typedef void (*Tbox__Net__TboxGPSCmd_Closure)
                 (const Tbox__Net__TboxGPSCmd *message,
                  void *closure_data);
typedef void (*Tbox__Net__TboxGPSInfo_Closure)
                 (const Tbox__Net__TboxGPSInfo *message,
                  void *closure_data);
typedef void (*Tbox__Net__TboxActiveState_Closure)
                 (const Tbox__Net__TboxActiveState *message,
                  void *closure_data);
typedef void (*Tbox__Net__IhuHeartType_Closure)
                 (const Tbox__Net__IhuHeartType *message,
                  void *closure_data);
typedef void (*Tbox__Net__TboxRemoteDiagnose_Closure)
                 (const Tbox__Net__TboxRemoteDiagnose *message,
                  void *closure_data);
typedef void (*Tbox__Net__IhuLogfile_Closure)
                 (const Tbox__Net__IhuLogfile *message,
                  void *closure_data);
typedef void (*Tbox__Net__IhuChargeAppoointmentSts_Closure)
                 (const Tbox__Net__IhuChargeAppoointmentSts *message,
                  void *closure_data);
typedef void (*Tbox__Net__TboxChargeAppoointmentSet_Closure)
                 (const Tbox__Net__TboxChargeAppoointmentSet *message,
                  void *closure_data);
typedef void (*Tbox__Net__TboxChargeCtrl_Closure)
                 (const Tbox__Net__TboxChargeCtrl *message,
                  void *closure_data);
typedef void (*Tbox__Net__TboxChargeRecord_Closure)
                 (const Tbox__Net__TboxChargeRecord *message,
                  void *closure_data);
typedef void (*Tbox__Net__SetTboxBatteryMode_Closure)
                 (const Tbox__Net__SetTboxBatteryMode *message,
                  void *closure_data);
typedef void (*Tbox__Net__TboxBatteryModeResult_Closure)
                 (const Tbox__Net__TboxBatteryModeResult *message,
                  void *closure_data);
typedef void (*Tbox__Net__StartSentinelMode_Closure)
                 (const Tbox__Net__StartSentinelMode *message,
                  void *closure_data);
typedef void (*Tbox__Net__EndSentinelMode_Closure)
                 (const Tbox__Net__EndSentinelMode *message,
                  void *closure_data);
typedef void (*Tbox__Net__ReStartSentinelMode_Closure)
                 (const Tbox__Net__ReStartSentinelMode *message,
                  void *closure_data);
typedef void (*Tbox__Net__BattHeatSingle_Closure)
                 (const Tbox__Net__BattHeatSingle *message,
                  void *closure_data);
typedef void (*Tbox__Net__SetBattHeatMode_Closure)
                 (const Tbox__Net__SetBattHeatMode *message,
                  void *closure_data);
typedef void (*Tbox__Net__BattHeatModeRecord_Closure)
                 (const Tbox__Net__BattHeatModeRecord *message,
                  void *closure_data);
typedef void (*Tbox__Net__SetBattHeatModeResult_Closure)
                 (const Tbox__Net__SetBattHeatModeResult *message,
                  void *closure_data);
typedef void (*Tbox__Net__ParkingRoute_Closure)
                 (const Tbox__Net__ParkingRoute *message,
                  void *closure_data);
typedef void (*Tbox__Net__ParkingRouteSingle_Closure)
                 (const Tbox__Net__ParkingRouteSingle *message,
                  void *closure_data);
typedef void (*Tbox__Net__ParkingRouteRecord_Closure)
                 (const Tbox__Net__ParkingRouteRecord *message,
                  void *closure_data);
typedef void (*Tbox__Net__SecurityGuard_Closure)
                 (const Tbox__Net__SecurityGuard *message,
                  void *closure_data);
typedef void (*Tbox__Net__DischargeState_Closure)
                 (const Tbox__Net__DischargeState *message,
                  void *closure_data);
typedef void (*Tbox__Net__NetworkStatus_Closure)
                 (const Tbox__Net__NetworkStatus *message,
                  void *closure_data);
typedef void (*Tbox__Net__TboxSignalType_Closure)
                 (const Tbox__Net__TboxSignalType *message,
                  void *closure_data);
typedef void (*Tbox__Net__MsgResult_Closure)
                 (const Tbox__Net__MsgResult *message,
                  void *closure_data);
typedef void (*Tbox__Net__TopMessage_Closure)
                 (const Tbox__Net__TopMessage *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    tbox__net__messagetype__descriptor;
extern const ProtobufCEnumDescriptor    tbox__net__network__send__on_off__descriptor;
extern const ProtobufCEnumDescriptor    tbox__net__signal_type__descriptor;
extern const ProtobufCEnumDescriptor    tbox__net__call_type__descriptor;
extern const ProtobufCEnumDescriptor    tbox__net__call_action_enum__descriptor;
extern const ProtobufCEnumDescriptor    tbox__net__call_action_result_enum__descriptor;
extern const ProtobufCEnumDescriptor    tbox__net__call_status_enum__descriptor;
extern const ProtobufCEnumDescriptor    tbox__net__gps__send__on_off__descriptor;
extern const ProtobufCEnumDescriptor    tbox__net__heart__type__descriptor;
extern const ProtobufCEnumDescriptor    tbox__net__data_type_enum__descriptor;
extern const ProtobufCEnumDescriptor    tbox__net__camera_name_enum__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__tbox_network_ctrl__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__call_action__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__call_action_result__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__call_status__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__tbox_info__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__tbox_gpscmd__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__tbox_gpsinfo__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__tbox_active_state__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__ihu_heart_type__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__tbox_remote_diagnose__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__ihu_logfile__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__ihu_charge_appoointment_sts__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__tbox_charge_appoointment_set__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__tbox_charge_ctrl__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__tbox_charge_record__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__set_tbox_battery_mode__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__tbox_battery_mode_result__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__start_sentinel_mode__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__end_sentinel_mode__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__re_start_sentinel_mode__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__batt_heat_single__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__set_batt_heat_mode__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__batt_heat_mode_record__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__set_batt_heat_mode_result__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__parking_route__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__parking_route_single__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__parking_route_record__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__security_guard__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__discharge_state__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__network_status__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__tbox_signal_type__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__msg_result__descriptor;
extern const ProtobufCMessageDescriptor tbox__net__top_message__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_TBOX_5fCDCS_5fv2_2e3_2eproto__INCLUDED */
